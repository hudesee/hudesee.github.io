<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hudesee.github.io</id>
    <title>hudese</title>
    <updated>2020-03-01T03:12:00.724Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hudesee.github.io"/>
    <link rel="self" href="https://hudesee.github.io/atom.xml"/>
    <subtitle>胡嘚瑟的个人博客</subtitle>
    <logo>https://hudesee.github.io/images/avatar.png</logo>
    <icon>https://hudesee.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, hudese</rights>
    <entry>
        <title type="html"><![CDATA[个人随笔2]]></title>
        <id>https://hudesee.github.io/post/ge-ren-sui-bi-2/</id>
        <link href="https://hudesee.github.io/post/ge-ren-sui-bi-2/">
        </link>
        <updated>2020-03-01T03:07:41.000Z</updated>
        <content type="html"><![CDATA[<pre><code>![](https://hudesee.github.io/post-images/1583032271003.jpg)
《西西里的美丽传说》是由朱塞佩·托纳多雷执导，莫尼卡·贝鲁奇、圭塞佩·苏尔法罗等主演的剧情片，于2000年10月27日在意大利上映。该片通过少年雷纳多的视角，讲述了二战时期的意大利西西里岛上的美丽少妇玛琳娜的故事。
</code></pre>
<p>电影开头，看到了一个少年拥有了一个自己的脚踏车。随后去加入了小伙伴们的队伍。然后就这样，他看到了让自己终生难忘的人——玛莲娜 。一个美丽动人的女人，让西西里岛上任何男人都神魂颠倒的女性。正值青春期的少年——雷纳多 ，不觉间被这个美丽女性吸引了。</p>
<p>自此，这个少年梦里都是他的女神。他幻想着拥有她，可是一次又一次的被现实打败。他是个穿着短裤的孩子，而玛莲娜是个有夫之妇。这些都在宣告，他们之间不可能。在之后的一段时间里，他只能远远的看着她。</p>
<p>不久后，前线传来消息，玛莲娜的丈夫牺牲了。这个时候，小镇上的男人都开始蠢蠢欲动。雷纳多为了保护他的女神，一直在以自己的方式去保护着她。</p>
<p>刚开始，我也觉得雷纳多和小镇上的男人们没有什么不同。都是基于原始的生理活动，让他们迷恋玛莲娜。</p>
<p>后来玛莲娜开始寻找自己的新的生活，可是结果表明他们都是迷恋她的美貌身体。当遇到事情的时候，他们就逃之夭夭。玛莲娜要的很简单，她只想找一个能让她依靠的男人。</p>
<p>可是那些男人只是被性驱使的行尸走肉而已。</p>
<p>小镇的平静被战争波及，玛莲娜的父亲在一次空气中遇难。她失去了生命中唯一的依靠。此后，她的生活变得很艰难。</p>
<p>但是她依旧每天都把自己打扮的很漂亮，这也彰显了她对生活的磨难不低头的态度，她没有对生活妥协。</p>
<p>后来她为了生计为了能够活下去，她出卖了自己的身体，但她能做什么呢，小镇上的人不给她食物，她也只是一个弱女子。</p>
<p>女人嫉妒她的容颜，男人贪婪她的美色。</p>
<p>也许真正懂她的就是少年雷纳多了。他从一开始的原始冲动，到慢慢的爱上了这个女人。可这又能做些什么呢，他始终鼓不起自己的勇气。<br>
<strong>爱一个人应该不顾流言蜚语。可是少年爱的不逢时。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[个人随笔1]]></title>
        <id>https://hudesee.github.io/post/ge-ren-sui-bi-1/</id>
        <link href="https://hudesee.github.io/post/ge-ren-sui-bi-1/">
        </link>
        <updated>2020-02-23T10:04:12.000Z</updated>
        <content type="html"><![CDATA[<p>2020年2月23日<br>
<img src="https://hudesee.github.io/post-images/1582452297203.jpg" alt="" loading="lazy"><br>
今天由于家里的网络出现了问题，所以脑子里出现了想要读一读书。在书中看到了一句话 “要么现在，要么今天” 这句话激励了作者，直至现在对他依旧影响很深。所以我也立刻去践行了这句话，立刻打开了手机热点，去学习GitHub。</p>
<p>关于GitHub，我很早之前就有了想要学习怎么使用他的看法。可是一直都没有成块的时间去学习它。于是在这个寒假我决定要学习它。于是在B站上面找了一些教程，看了几天便被git命令行给劝退了。为了学习命令行，我又在网上找了一些学习命令行的教程。学着学着我又有有点不耐烦，我在想 “我当初为什么要学习GitHub”，我是为了学习更优秀的人所写的东西。我想通过别人在GitHub上面所开源的优秀的项目，去学习他们的代码。于是我就在网上找怎么在GitHub上面下载别人的源码。后来看到了别人写的关于GitHub的文章。</p>
<p>至此，我停了下来，我反思了自己。</p>
<ul>
<li>我为什么要学习GitHub<br>
为了学习别人优秀的代码，可是啊! 我现在基础都没有打好，即便找到了项目，我对于他们的源码根本无从下手，也根本就看不懂。</li>
<li>怎么学习GitHub<br>
在网上找视频教程， 可是这么多天了，一个简单的教程根本没有坚持下来，反而是越来越迷茫。但是也有收获，一些简单的东西，也学会了这也是进步。</li>
</ul>
<p>对于这么多天来的学习，我自己也思考了一下。对于现在的我应该怎么做。我订了一个现阶段的目标，<strong>将git命令行学会</strong>。<br>
一定要坚持下去</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第三届蓝桥杯Java组 最大数]]></title>
        <id>https://hudesee.github.io/post/di-san-jie-lan-qiao-bei-java-zu-zui-da-shu/</id>
        <link href="https://hudesee.github.io/post/di-san-jie-lan-qiao-bei-java-zu-zui-da-shu/">
        </link>
        <updated>2020-02-21T08:51:46.000Z</updated>
        <summary type="html"><![CDATA[<p>☀️☀️☀️</p>
<h2 id="第三届蓝桥杯java组-最大数">第三届蓝桥杯Java组 最大数</h2>
<h2 id="description">Description</h2>
<p><strong>[12,127,85,66,27,34,15,344,156,344,29,47,....]</strong></p>
<p>这是某设备测量到的工程数据。</p>
<p>因工程要求，需要找出最大的5个值。</p>
<p>一般的想法是对它排序，输出前5个。但当数据较多时，这样做很浪费时间。因为对输出数据以外的数据进行排序并非工程要求，即便是要输出的5个数字，也并不要求按大小顺序，只要找到5个就可以。</p>
]]></summary>
        <content type="html"><![CDATA[<p>☀️☀️☀️</p>
<h2 id="第三届蓝桥杯java组-最大数">第三届蓝桥杯Java组 最大数</h2>
<h2 id="description">Description</h2>
<p><strong>[12,127,85,66,27,34,15,344,156,344,29,47,....]</strong></p>
<p>这是某设备测量到的工程数据。</p>
<p>因工程要求，需要找出最大的5个值。</p>
<p>一般的想法是对它排序，输出前5个。但当数据较多时，这样做很浪费时间。因为对输出数据以外的数据进行排序并非工程要求，即便是要输出的5个数字，也并不要求按大小顺序，只要找到5个就可以。</p>
<!-- more -->
<p>以下的代码采用了另外的<strong>思路</strong>。考虑如果<strong>手里 <em>已经</em> 抓着5个最大数</strong>，再来一个数据怎么办呢？让它和手里的数据比，如果比哪个大，就抢占它的座位，让那个被挤出来的再自己找位子,....</p>
<p>请分析代码逻辑，并推测划线处的代码。</p>
<p>注意：<strong>只写划线处应该填的内容，划线前后的内容不要抄写。</strong></p>
<p>Input</p>
<p>没有输入。</p>
<p>Output</p>
<p>填写适当代码替换横线，使得程序能输出序列中最大的5个值。</p>
<h2 id="思路">思路</h2>
<p>开始看到这个题，脑子里最先闪过的就是递归函数，刚开始我没有<br>
发现这个递归函数是怎么递归的。<br>
但结合题目中所说，考虑如果<strong>手里 <em>已经</em> 抓着5个最大数</strong> 这里应该先取出五个数，然后将剩余<strong>7</strong>个数 与 已经取出的<strong>5</strong>个数依次进行对比。</p>
<blockquote>
<p><strong>让它和手里的数据比，如果比哪个大，就抢占它的座位，让那个被挤出来的再自己找位子,....</strong><br>
​</p>
</blockquote>
<p>好了现在我们开始看代码</p>
<pre><code class="language-java">package Test;


import java.util.*;
public class Test_lanqiao
{
        public static List&lt;Integer&gt; max5(List&lt;Integer&gt; lst)
    {
        if(lst.size()&lt;=5) return lst;//返回到最近调用 lst 的地方 因此推出是第一个需要填空的地方
        
        int a = lst.remove(0);

  // 填空
        
        List&lt;Integer&gt; b = max5(lst);// 递归函数

        for(int i=0; i&lt;b.size(); i++)
        {
            int t = b.get(i);
            
            //下面的代码就是开始进行比较，
            if(a&gt;t)
            {
                //将大的值替换到小的值的位置
                Collections.replaceAll(b, t, a);// 填空
                a = t;  //将小的值踢出，让他重新与别的值进行比较
            }
        }
        
        return b; //返回到最近调用 b 的地方 即List&lt;Integer&gt; b = max5(lst);// 递归函数
处
    }
    
    public static void main(String[] args)
    {
        List&lt;Integer&gt; lst = new Vector&lt;Integer&gt;();
        lst.addAll(Arrays.asList(12,127,85,66,27,34,15,344,156,344,29,47));    
    
        System.out.println(max5(lst));
        
}
</code></pre>
<p>具体的可以在代码中增加几个 System.out.prinln();<br>
可以打印，这样可以更加直观的看代码具体的功能</p>
<blockquote>
<p>Java list.remove( i )方法  删除具体位置的值<br>
i 是移除 list 中具体位置下标</p>
</blockquote>
<blockquote>
<p>b.get(i);方法  查看具体位置的值<br>
i 是查看 b 中具体位置下标</p>
</blockquote>
<p>Collections.replaceAll() 的方法见下方link<br>
<a href="https://blog.csdn.net/weixin_43866499/article/details/104430297">Java集合-Collections的replaceAll()方法</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于我]]></title>
        <id>https://hudesee.github.io/post/guan-yu-wo/</id>
        <link href="https://hudesee.github.io/post/guan-yu-wo/">
        </link>
        <updated>2020-02-20T10:53:12.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://hudesee.github.io/post-images/1582255028337.jpg" alt="" loading="lazy"></figure>
<h2 id="关于本站">🏠 关于本站</h2>
<p>记录一下自己的生活和学习经历，希望能变得更好。</p>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://hudesee.github.io/post-images/1582255028337.jpg" alt="" loading="lazy"></figure>
<h2 id="关于本站">🏠 关于本站</h2>
<p>记录一下自己的生活和学习经历，希望能变得更好。</p>
<!-- more -->
<h2 id="说给自己的话">👨‍💻 说给自己的话</h2>
<p>大多数人又懒又笨，你只要做的比他们好一点，比他们更努力一点。你就可以超越大部分人。<br>
你的自制力很差，你要自己学会远离一些诱惑。<br>
希望你能变得越来越好。</p>
<h2 id="找到我">📬 找到我</h2>
<p>关注个人公众号 <strong>胡嘚瑟同学</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黄金队列]]></title>
        <id>https://hudesee.github.io/post/huang-jin-dui-lie/</id>
        <link href="https://hudesee.github.io/post/huang-jin-dui-lie/">
        </link>
        <updated>2020-02-01T10:17:24.000Z</updated>
        <content type="html"><![CDATA[<p>第三届蓝桥杯Java组 黄金队列</p>
<p>Description</p>
<p>黄金分割数0.618与美学有重要的关系。舞台上报幕员所站的位置大约就是舞台宽度的0.618处，墙上的画像一般也挂在房间高度的0.618处，甚至股票的波动据说也能找到0.618的影子....</p>
<p>黄金分割数是个无理数，也就是无法表示为两个整数的比值。0.618只是它的近似值，其真值可以通过对5开方减去1再除以2来获得，我们取它的一个较精确的近似值：0.618034</p>
<p>有趣的是，一些简单的数列中也会包含这个无理数，这很令数学家震惊！</p>
<p>1 3 4 7 11 18 29 47 .... 称为“鲁卡斯队列”。它后面的每一个项都是前边两项的和。</p>
<p>如果观察前后两项的比值，即：1/3 3/4 4/7 7/11 11/18 ... 会发现它越来越接近于黄金分割数！</p>
<p>你的任务就是计算出从哪一项开始，这个比值四舍五入后已经达到了与0.618034一致的精度。</p>
<p>请写出该比值。格式是：分子/分母。比如：29/47</p>
<p>Input</p>
<p>没有输入。</p>
<p>Output</p>
<p>输出比值四舍五入后达到了与0.618034一致精度的第一个分式。</p>
<p>这个题需要用高精度的格式来写就需要用到 BigDecimal。<br>
什么是BigDecimal呢？</p>
<ul>
<li></li>
</ul>
<blockquote>
<p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数。在实际应用中，需要对更大或者更小的数进行运算和处理。float和double只能用来做科学计算或者是工程计算，在商业计算中要用java.math.BigDecimal。BigDecimal所创建的是对象，我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象。<br>
<strong>以上来源于百度百科</strong></p>
</blockquote>
<ul>
<li></li>
</ul>
<p>这个题呢很简单，仔细观察一下发现和 斐波那契数列 很相似，他们都是有规律的，前一项分子和分母的和等于 后面一项的分母，前一项的分母等于后一项的分子，当发现这个规律之后，这个题就迎刃而解了，只不过需要注意BigDecimal 的用法。</p>
<pre><code class="language-java">import java.math.*;
public class Main
{
	public static void main(String[] args) {
		/*
		 * 分子:numerator 分母:denominator
		 */
		BigDecimal golden = new BigDecimal(&quot;0.618034&quot;);//使用字符串不容易出错
		BigDecimal numerator = new BigDecimal(&quot;1&quot;);
		BigDecimal denominator = new BigDecimal(&quot;3&quot;);
		BigDecimal temp = new BigDecimal(&quot;0&quot;);
		while(true )
		{	
				if (golden.equals(numerator.divide(denominator, 6,BigDecimal.ROUND_HALF_UP ))) {
				break ;
				//BigDecimal.ROUND_HALF_UP  是四舍五入
				
			}
			else {
				
				temp = numerator.add(denominator);
				numerator = denominator;
				denominator = temp;
				
			
			}
			
			
			
		}
		
		System.out.println(numerator+ &quot;/&quot; +denominator);
	}
	
}

</code></pre>
<p>粗略见解，请大家多多指教。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[三角矩阵的压缩矩阵]]></title>
        <id>https://hudesee.github.io/post/san-jiao-ju-zhen-de-ya-suo-ju-zhen/</id>
        <link href="https://hudesee.github.io/post/san-jiao-ju-zhen-de-ya-suo-ju-zhen/">
        </link>
        <updated>2020-01-16T10:43:02.000Z</updated>
        <content type="html"><![CDATA[<p>三角矩阵的压缩矩阵</p>
<p>首先三角矩阵的压缩矩阵<br>
对角线上的元素加上对角线以下的元素，是我们要存储的元素，对角线上面的也是我们要存储的元素，不过他们是相同常数，因此我们可以把这些同样的常数，只要存储一个就可以了。<br>
以上就是下三角矩阵，在一维数组中进行存储，下标k 的公式很好推导，我们利用数学中的等差数列就可以推导出来。(数组中元素最开始的下标为0)</p>
<p>来说一下上三角矩阵，上三角矩阵在一维数组中存储的下<br>
标公式。</p>
<p>在这里插入图片描述<br>
<img src="https://hudesee.github.io/post-images/1579171473625.jpg" alt="" loading="lazy"><br>
出现n 就是为了更好的方便计算，引入i,j是因为二维数组的下标。因为存储二维数组就是把二维数组中的元素存储到一维数组中，因此，i,j在公式中肯定是必不可少的。</p>
<p>粗略见解，请多指教。</p>
]]></content>
    </entry>
</feed>